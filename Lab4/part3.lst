     1                                  extern printf
     2                                  extern scanf
     3                                  extern srand
     4                                  extern rand
     5                                  extern free
     6                                  extern malloc
     7                                  
     8                                  global main
     9                                  
    10                                  %define NULL 0
    11                                  %define array1_size 30
    12                                  %define NL 10
    13                                  %define TAB 9 
    14                                  %define EXIT_SUCCESS 0
    15                                  
    16                                  section .bss
    17                                      ;array: resd 0
    18                                  
    19                                  section .data
    20 00000000 00000000                    array: dd 0x0
    21 00000004 256400                      fmt_int: db "%d", 0 
    22 00000007 6172726179313A0900          fmt0: db "array1:", TAB, NULL
    23 00000010 25640900                    fmt1: db "%d", TAB, NULL
    24 00000014 456E74657220746865-         ask1: db "Enter the number of elements in the array ", NULL, NL
    24 0000001D 206E756D626572206F-
    24 00000026 6620656C656D656E74-
    24 0000002F 7320696E2074686520-
    24 00000038 617272617920000A   
    25 00000040 456E74657220746865-         ask2: db "Enter the seed to use for rand() ", NULL, NL
    25 00000049 207365656420746F20-
    25 00000052 75736520666F722072-
    25 0000005B 616E64282920000A   
    26 00000063 456E74657220746865-         ask3: db "Enter the modulo to apply to the random numbers ", NULL, NL
    26 0000006C 206D6F64756C6F2074-
    26 00000075 6F206170706C792074-
    26 0000007E 6F207468652072616E-
    26 00000087 646F6D206E756D6265-
    26 00000090 727320000A         
    27 00000095 6172726179313A20            fmt3: db "array1: "
    28 0000009D 0A                          fmtdone: db "", NL
    29 0000009E 6E756D20656C733A20-         test: db "num els: %d rand_seed %d modulo %d", NL, NULL
    29 000000A7 25642072616E645F73-
    29 000000B0 656564202564206D6F-
    29 000000B9 64756C6F2025640A00 
    30                                  
    31 000000C2 00000000                    num_els dd 0
    32 000000C6 00000000                    rand_seed dd 0
    33 000000CA 00000000                    modulo dd 0
    34                                  
    35                                  section .rodata
    36                                  
    37                                  section .text
    38                                  
    39                                  main:
    40 00000000 55                          push ebp
    41 00000001 89E5                        mov ebp, esp
    42                                  
    43 00000003 BF00000000                  mov edi, 0  
    44 00000008 B800000000                  mov eax, 0
    45                                  
    46                                  start:
    47 0000000D 68[14000000]                push ask1 ;; Enter num of elements 
    48 00000012 E8(00000000)                call printf
    49 00000017 83C404                      add esp, 4
    50                                  
    51 0000001A 68[C2000000]                push num_els
    52 0000001F 68[04000000]                push fmt_int
    53 00000024 E8(00000000)                call scanf
    54 00000029 83C408                      add esp, 8
    55                                      
    56 0000002C 83F801                      cmp eax, 1
    57 0000002F 7509                        jne .invalid_array_size
    58 00000031 833D[C2000000]00            cmp dword [num_els], 0
    59 00000038 7F0A                        jg .valid_array_size
    60                                  
    61                                      .invalid_array_size:
    62 0000003A C705[C2000000]0700-         mov dword [num_els], 7
    62 00000042 0000               
    63                                  
    64                                      .valid_array_size: ;; Proceed to seed size
    65 00000044 68[40000000]                push ask2 
    66 00000049 E8(00000000)                call printf
    67 0000004E 83C404                      add esp, 4
    68                                  
    69 00000051 68[C6000000]                push rand_seed
    70 00000056 68[04000000]                push fmt_int
    71 0000005B E8(00000000)                call scanf
    72 00000060 83C408                      add esp, 8
    73                                  
    74 00000063 83F801                      cmp eax, 1
    75 00000066 7509                        jne .invalid_seed_size
    76 00000068 833D[C6000000]00            cmp dword [rand_seed], 0
    77 0000006F 7F0A                        jg .valid_seed_size
    78                                  
    79                                      .invalid_seed_size:
    80 00000071 C705[C6000000]0500-         mov dword [rand_seed], 5
    80 00000079 0000               
    81                                  
    82                                      .valid_seed_size: ;; Proceed to modulo    sub esp, 4
    84 0000007B 68[63000000]                push ask3
    85 00000080 E8(00000000)                call printf
    86 00000085 83C408                      add esp, 8
    87                                  
    88 00000088 68[CA000000]                push modulo
    89 0000008D 68[04000000]                push fmt_int
    90 00000092 E8(00000000)                call scanf
    91 00000097 83C408                      add esp, 8
    92                                  
    93 0000009A 83F801                      cmp eax, 1
    94 0000009D 7509                        jne .invalid_modulo_size
    95 0000009F 833D[CA000000]00            cmp dword [modulo], 0
    96 000000A6 7F0A                        jg .valid_modulo_size
    97                                  
    98                                      .invalid_modulo_size:
    99 000000A8 C705[CA000000]2500-         mov dword [modulo], 37
    99 000000B0 0000               
   100                                  
   101                                      .valid_modulo_size: ;; Continue onwards
   102                                  
   103                                  
   104                                  create_array:
   105                                  
   106 000000B2 A1[C2000000]                mov eax, [num_els]
   107 000000B7 BB04000000                  mov ebx, 4
   108 000000BC F7E3                        mul ebx
   109                                      
   110 000000BE 50                          push eax
   111 000000BF E8(00000000)                call malloc
   112 000000C4 83C404                      add esp, 4
   113                                  
   114 000000C7 A3[00000000]                mov [array], eax
   115                                  
   116 000000CC BF00000000                  mov edi, 0 
   117 000000D1 B800000000                  mov eax, 0
   118                                  
   119                                  assign:
   120                                  
   121 000000D6 FF35[C6000000]              push dword [ rand_seed ]
   122 000000DC E8(00000000)                call srand
   123 000000E1 83C404                      add esp, 4  
   124                                  
   125 000000E4 8B1D[00000000]              mov ebx, [array]
   126                                  
   127                                  
   128                                  .loop:    
   129 000000EA 57                          push edi    
   130                                  
   131 000000EB E8(00000000)                call rand
   132 000000F0 BA00000000                  mov edx, 0
   133 000000F5 8B1D[00000000]              mov ebx, [ array ] 
   134 000000FB F735[CA000000]              div dword [ modulo ]
   135 00000101 8914BB                      mov [ebx + edi * 4], edx 
   136                                      
   137 00000104 5F                          pop edi
   138 00000105 47                          inc edi 
   139 00000106 3B3D[C2000000]              cmp edi, [ num_els ] 
   140                                  
   141 0000010C 7EDC                        jle .loop
   142                                      
   143                                  
   144                                  print: 
   145 0000010E 68[07000000]                push dword fmt0
   146 00000113 E8(00000000)                call printf
   147 00000118 83C404                      add esp, 4
   148                                  
   149 0000011B BF00000000                  mov edi, 0
   150 00000120 B800000000                  mov eax, 0
   151                                  
   152 00000125 8B15[C2000000]              mov edx, [num_els]
   153 0000012B 83EA01                      sub edx, 1 
   154 0000012E 52                          push edx
   155                                      
   156                                  
   157                                      .loop:
   158 0000012F 52                          push edx
   159 00000130 50                          push eax
   160 00000131 57                          push edi
   161                                  
   162 00000132 8B04BB                      mov eax, [ebx+edi * 4]
   163                                  
   164 00000135 50                          push dword eax
   165 00000136 68[10000000]                push dword fmt1
   166 0000013B E8(00000000)                call printf
   167 00000140 83C408                      add esp, 8
   168                                  
   169                                  
   170 00000143 5F                          pop edi
   171 00000144 58                          pop eax
   172 00000145 5A                          pop edx
   173                                  
   174 00000146 47                          inc edi
   175                                  
   176 00000147 39D7                        cmp edi, edx
   177 00000149 7EE4                        jle .loop
   178                                  
   179                                  done:
   180                                  
   181 0000014B A1[00000000]                mov eax, [array]
   182 00000150 50                          push eax
   183 00000151 E8(00000000)                call free
   184 00000156 83C404                      add esp, 4    
   185                                      
   186 00000159 89EC                        mov esp, ebp
   187 0000015B 5D                          pop ebp
   188                                  
   189 0000015C B800000000                  mov eax, 0
   190 00000161 C3                          ret
   191                                  
   192                                  
